AWSTemplateFormatVersion: '2010-09-09'

Description: 'NgPy Accounts Manager App creation: S3 Web Bucket and Lambda with API Gateway through CloudFront and Route53'

# Parameters
Parameters:
  AppName:
    Description: 'The name of the application'
    Type: String
  ArtifactsBucket:
    Description: 'The S3 bucket containing the build artifacts (UI)'
    Type: String
  WebBucket:
    Description: 'The S3 web bucket containing the UI'
    Type: String
  LambdaImage:
    Description: 'The ECR image to use for the lambda image (API)'
    Type: String
  EnvironmentProfile:
    Description: 'The profile of the environment'
    Type: String
    Default: 'dev'
  SessionSecretKey:
    Description: 'The session secret key'
    Type: String
  DomainNameApi:
    Description: 'The domain name for the API'
    Type: String
  DomainNameUi:
    Description: 'The domain name for the UI'
    Type: String
  HostedZoneId:
    Description: 'The hosted zone id to attach the domain names to'
    Type: AWS::Route53::HostedZone::Id
  CertificateArn:
    Description: 'The ARN to the SSL certificate to use for the API and the UI'
    Type: String
  DBUsername:
    Description: 'The master username for the database'
    Type: String
  DBPassword:
    Description: 'The master password for the database'
    Type: String
  VpcCIDR:
    Description: 'The CIDR IP range for the VPC'
    Type: String
    Default: 10.90.0.0/16
  PublicSubnet1CIDR:
    Description: 'IP range (CIDR notation) for the public subnet in the first Availability Zone'
    Type: String
    Default: 10.90.10.0/24
  PublicSubnet2CIDR:
    Description: 'IP range (CIDR notation) for the public subnet in the second Availability Zone'
    Type: String
    Default: 10.90.11.0/24
  PrivateSubnet1CIDR:
    Description: 'IP range (CIDR notation) for the private subnet in the first Availability Zone'
    Type: String
    Default: 10.90.20.0/24
  PrivateSubnet2CIDR:
    Description: 'IP range (CIDR notation) for the private subnet in the second Availability Zone'
    Type: String
    Default: 10.90.21.0/24

# Resources
Resources:

  ##################################################################
  # VPC
  ##################################################################

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Internet Gateway Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet First Availability Zone
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Public Subnet Second Availability Zone
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Private Subnet First Availability Zone
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Private Subnet Second Availability Zone
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Default Public Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnet Route Table Association First Availability Zone
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Public Subnet Route Table Association Second Availability Zone
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private Route Table First Availability Zone
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Private Route Table Second Availability Zone
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Private Subnet Route Table Association First Availability Zone
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  # Private Subnet Route Table Association Second Availability Zone
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ##################################################################
  # Security Groups for the RDS Cluster
  ##################################################################

  # RDS Client Security Group
  RDSClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'rds-client-sg'
      GroupDescription: 'Security group for the RDS Cluster clients'
      VpcId: !Ref VPC
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # RDS Cluster Security Group
  RDSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'rds-cluster-sg'
      GroupDescription: 'Security group for the RDS Cluster'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref RDSClientSecurityGroup
      Tags:
        - Key: AppName
          Value: !Ref AppName

  ##################################################################
  # Main Lambda function (API)
  ##################################################################

  # Main Lambda Function (API)
  MainLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AppName}ApiFunction'
      Description: !Sub '${AppName} API Lambda Function'
      PackageType: Image
      Timeout: 30
      Role: !GetAtt MainLambdaIamRole.Arn
      Code:
        ImageUri: !Ref LambdaImage
      VpcConfig:
        SecurityGroupIds:
          - !Ref RDSClientSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DATABASE_URI: !Sub 'postgresql://${DBUsername}:${DBPassword}@${RDSCluster.Endpoint.Address}:${RDSCluster.Endpoint.Port}/${AppName}Db'
          SESSION_SECRET_KEY: !Ref SessionSecretKey
          CORS_ORIGIN: !Sub 'https://${DomainNameUi}'
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Main Lambda IAM Role
  MainLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AppName}ApiFunctionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AppName}ApiFunctionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DetachNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AppName}ApiFunction:*'
      Tags:
        - Key: AppName
          Value: !Ref AppName

  ##################################################################
  # API Gateway
  ##################################################################

  # API Gateway REST API
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AppName}RestApi'
      Description: !Sub '${AppName} REST API'
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # API Gateway Resource
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: '{proxy+}'

  # API Gateway Method
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MainLambdaFunction.Arn}/invocations'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: !Sub '${AppName} API Gateway Deployment'
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  # API Gateway Permission to invoke lambda
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MainLambdaFunction
      Principal: 'apigateway.amazonaws.com'
      Action: 'lambda:InvokeFunction'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*'

  ##################################################################
  # S3 Bucket for UI
  ##################################################################

  # S3 Bucket for UI
  S3WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebBucket
      AccessControl: 'PublicRead'
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # S3 Bucket Policy for UI
  S3WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3WebBucket
      PolicyDocument:
        Statement:
          Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - !Sub 'arn:aws:s3:::${WebBucket}/*'
          Principal:
            AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${WebCloudfrontOriginAccessIdentity}'

  ##################################################################
  # Route 53 Record Set for API
  ##################################################################

  # API Gateway Domain Name for API
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertificateArn
      DomainName: !Ref DomainNameApi
      EndpointConfiguration:
        Types:
          - EDGE
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # Route 53 Record Set for API
  ApiRoute53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainNameApi
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomainName.DistributionHostedZoneId
        DNSName: !GetAtt ApiGatewayDomainName.DistributionDomainName

  # Api Gateway Base Path Mapping
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayDomainName
      - ApiGatewayDeployment
    Properties:
      DomainName: !Ref DomainNameApi
      RestApiId: !Ref ApiGatewayRestApi
      Stage: 'v0'

  ##################################################################
  # CloudFront Distribution for UI
  ##################################################################

  # CloudFront Distribution for UI
  WebCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: S3WebBucket
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: 'PriceClass_100'
        Origins:
          - Id: !Sub '${AppName}UiOrigin'
            DomainName: !GetAtt S3WebBucket.DomainName
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WebCloudfrontOriginAccessIdentity}'
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainNameUi
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: !Sub '${AppName}UiOrigin'
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # CloudFront Origin Access Identity for UI
  WebCloudfrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${AppName}CloudFrontOriginAccessIdentity'

  ##################################################################
  # Route 53 Record Set for UI
  ##################################################################

  # Route 53 Record Set for UI
  Weboute53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainNameUi
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront 'hardcoded' HostedZoneId
        DNSName: !GetAtt WebCloudfrontDistribution.DomainName

  ##################################################################
  # Aurora Serverless Database
  ##################################################################

  # RDS DB Cluster
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DatabaseName: !Sub '${AppName}Db'
      Engine: aurora-postgresql
      EngineMode: serverless
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VpcSecurityGroupIds:
        - !Ref RDSClusterSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Tags:
        - Key: AppName
          Value: !Ref AppName

  # RDS DB Subnet Group
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${AppName}DbSubnetGroup'
      DBSubnetGroupDescription: !Sub '${AppName} DB Subnet Group'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: AppName
          Value: !Ref AppName
