version: 2.1

# Defining parameters
parameters:
  docker-image-api:
    type: string
    default: "cimg/python:3.7"
  docker-image-ui:
    type: string
    default: "cimg/node:14.19"
  branch-release:
    type: string
    default: "release"
# Additional environment variables are required for release and deployment:
#  - AWS_ACCESS_KEY_ID
#  - AWS_SECRET_ACCESS_KEY
#  - AWS_REGION
#  - AWS_ECR_REGISTRY_ID
#  - AWS_S3_ARCHIVE
#  - AWS_S3_WEB
#  - ENV_PROFILE
#  - SESSION_SECRET_KEY
#  - DOMAIN_NAME_API
#  - DOMAIN_NAME_UI = AWS_S3_WEB
#  - HOSTED_ZONE_ID
#  - CERTIFICATE_ARN
#  - DATABASE_USERNAME
#  - DATABASE_PASSWORD

# Adding required orbs
orbs:
  browser-tools: circleci/browser-tools@1.2.5
  aws-cli: circleci/aws-cli@3.0.0
  aws-ecr: circleci/aws-ecr@8.0.0
  aws-s3: circleci/aws-s3@3.0.0

jobs:
  # Updating the version
  update-version:
    docker:
      - image: golang:latest
    steps:
      - run:
          name: "Updating version"
          command: |
            export APP_VERSION="$(date +%Y-%m-%d).${CIRCLE_SHA1:0:7}"
            echo "Defining version: $APP_VERSION"
            mkdir -p workspace
            echo "export APP_VERSION=$APP_VERSION" >> ./workspace/workflow-env-vars
      - persist_to_workspace:
          root: .
          paths:
            - ./workspace/workflow-env-vars

  # Build the API
  build-api:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-api
    docker:
      - image: << pipeline.parameters.docker-image-api >>
    steps:
      - checkout:
          path: ~/ngpy-accounts-manager
      - restore_cache:
          keys:
            - pip-{{ checksum "requirements.txt" }}
            - pip-
      - run:
          name: "Installing dependencies"
          command: pip install -r requirements.txt -t ./src/site-packages
      - save_cache:
          paths:
            - ./src/site-packages
          key: pip-{{ checksum "requirements.txt" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - ./ngpy-accounts-manager/ngpy-accounts-manager-api/src
            - ./ngpy-accounts-manager/ngpy-accounts-manager-api/tests

  # Build the UI
  build-ui:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-ui
    docker:
      - image: << pipeline.parameters.docker-image-ui >>
    steps:
      - checkout:
          path: ~/ngpy-accounts-manager
      - restore_cache:
          keys:
            - npm-{{ checksum "package-lock.json" }}
            - npm-
      - run:
          name: "Installing dependencies"
          command: npm ci --cache .npm --prefer-offline
      - save_cache:
          paths:
            - ./.npm
          key: npm-{{ checksum "package-lock.json" }}
      - run:
          name: "Building"
          command: npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - ./ngpy-accounts-manager/ngpy-accounts-manager-ui

  # Test the API
  test-api:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-api
    docker:
      - image: << pipeline.parameters.docker-image-api >>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Testing"
          command: PYTHONPATH=./src/site-packages:./src python -m pytest tests/
      - persist_to_workspace:
          root: ~/
          paths:
            - ./ngpy-accounts-manager/ngpy-accounts-manager-api/src

  # Test the UI
  test-ui:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-ui
    docker:
      - image: << pipeline.parameters.docker-image-ui >>-browsers
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          name: "Checking install"
          command: |
            google-chrome --version
            chromedriver --version
      - attach_workspace:
          at: ~/
      - run:
          name: "Testing"
          command: npm run test
      - persist_to_workspace:
          root: ~/
          paths:
            - ./ngpy-accounts-manager/ngpy-accounts-manager-ui/dist/ngpy-accounts-manager-ui

  # Release the API
  release-api:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-api
    docker:
      - image: << pipeline.parameters.docker-image-api >>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Reloading vars"
          command: cat ~/workspace/workflow-env-vars >> $BASH_ENV
      - aws-ecr/ecr-login
      - aws-ecr/build-image:
          repo: "ngpy-accounts-manager"
          tag: "${APP_VERSION}"

  # Release the UI
  release-ui:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-ui
    docker:
      - image: << pipeline.parameters.docker-image-ui >>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Reloading vars"
          command: cat ~/workspace/workflow-env-vars >> $BASH_ENV
      - run:
          name: "Packaging"
          command: |
            cd dist/ngpy-accounts-manager-ui
            zip -r ../ngpy-accounts-manager-ui.zip .
            cd ../..
      - aws-s3/copy:
          from: dist/ngpy-accounts-manager-ui.zip
          to: "s3://${AWS_S3_ARCHIVE}/ngpy-accounts-manager/${APP_VERSION}/"
      - persist_to_workspace:
          root: .
          paths:
            - ./dist/ngpy-accounts-manager-ui

  # Deploy the API
  deploy-api:
    working_directory: ~/ngpy-accounts-manager
    docker:
      - image: << pipeline.parameters.docker-image-api >>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Reloading vars"
          command: cat ~/workspace/workflow-env-vars >> $BASH_ENV
      - checkout
      - aws-cli/setup
      - run:
          name: "Deploying"
          command: |
            aws cloudformation deploy \
              --stack-name NgPyAccountsManager \
              --template-file ./.aws/cloudformation.yaml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides \
              AppName=NgPyAccountsManager \
              ArtifactsBucket="${AWS_S3_ARCHIVE}" \
              WebBucket="${AWS_S3_WEB}" \
              LambdaImage="${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/ngpy-accounts-manager:${APP_VERSION}" \
              EnvironmentProfile="${ENV_PROFILE}" \
              SessionSecretKey="${SESSION_SECRET_KEY}" \
              DomainNameApi="${DOMAIN_NAME_API}" \
              DomainNameUi="${DOMAIN_NAME_UI}" \
              HostedZoneId="${HOSTED_ZONE_ID}" \
              CertificateArn="${CERTIFICATE_ARN}" \
              DBUsername="${DATABASE_USERNAME}" \
              DBPassword="${DATABASE_PASSWORD}"

  # Deploy the UI
  deploy-ui:
    working_directory: ~/ngpy-accounts-manager/ngpy-accounts-manager-ui
    docker:
      - image: << pipeline.parameters.docker-image-ui >>
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Updating API URI"
          command: |
            export PROD_BACKEND_URI="https://${DOMAIN_NAME_API}"
            find dist/ngpy-accounts-manager-ui/assets/config/. -type f -exec bash -c 'envsubst < $1 > $1.tmp && mv $1.tmp $1' -- {} \;
      - aws-s3/sync:
          from: dist/ngpy-accounts-manager-ui
          to: "s3://${AWS_S3_WEB}"

workflows:
  # The main workflow
  build-and-test:
    jobs:
      # Updating version
      - update-version:
          filters:
            branches:
              only: /.*/
      # Build: API and UI
      - build-api:
          requires:
            - update-version
          filters:
            branches:
              only: /.*/
      - build-ui:
          requires:
            - update-version
          filters:
            branches:
              only: /.*/
      # Test: API and UI
      - test-api:
          requires:
            - build-api
          filters:
            branches:
              only: /.*/
      - test-ui:
          requires:
            - build-ui
          filters:
            branches:
              only: /.*/
      # Release: API and UI
      - release-api:
          executor: aws-ecr/default
          requires:
            - test-api
            - test-ui
          filters:
            branches:
              only: << pipeline.parameters.branch-release >>
      - release-ui:
          requires:
            - test-api
            - test-ui
          filters:
            branches:
              only: << pipeline.parameters.branch-release >>
      # Deploy: API and UI
      - hold:
          type: approval
          requires:
            - release-api
            - release-ui
      - deploy-api:
          requires:
            - hold
      - deploy-ui:
          requires:
            - hold
