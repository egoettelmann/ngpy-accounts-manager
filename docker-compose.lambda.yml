version: '3.1'

services:

  # API
  # Proxy that translates HTTP requests into lambda invocations.
  api:
    image: elthrasher/http-lambda-invoker
    ports:
      - '5000:8080'
    environment:
      LAMBDA_ENDPOINT: http://lambda-api:9001
      LAMBDA_NAME: function
      PORT: 8080

  # Lambda function that handles the API
  # Docker image that emulates lambda behaviour (available on port 9001).
  lambda-api:
    build:
      context: ./ngpy-accounts-manager-api
      args:
        APP_VERSION: 'dev'
    volumes:
      - ./database/storage:/var/task/storage
    environment:
      DOCKER_LAMBDA_STAY_OPEN: 1
      DATABASE_URI: 'postgresql://${DB_USERNAME}:${DB_PASSWORD}@db:5432/api'
      SESSION_SECRET_KEY: '${SESSION_SECRET_KEY}'
      CORS_ORIGIN: 'http://localhost:4210'

  # Lambda function that handles the DB migration
  # Docker image that waits that the database is up, executes the migration and dies afterwards.
  lambda-migrate:
    build:
      context: ./ngpy-accounts-manager-api
      args:
        APP_VERSION: 'dev'
    entrypoint: ./wait && python migrate.py
    environment:
      DATABASE_URI: 'postgresql://${DB_USERNAME}:${DB_PASSWORD}@db:5432/api'
      WAIT_HOSTS: db:5432

  # UI
  # Nginx that serves static assets (and proxies '/api' requests to API for CORS).
  ui:
    build:
      context: ./ngpy-accounts-manager-ui
      args:
        PROD_BACKEND_URI: '${BACKEND_URI}'
    ports:
      - '4200:80'
    environment:
      NGINX_PROFILE: 'lambda'
      API_TARGET_HOST: 'http://api:8080/'

  # Database
  # Postgres database
  db:
    image: postgres
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - ./database/samples:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: '${DB_USERNAME}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
      POSTGRES_DB: '${DB_NAME}'
